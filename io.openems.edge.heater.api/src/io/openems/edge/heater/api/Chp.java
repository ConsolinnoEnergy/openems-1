package io.openems.edge.heater.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.exceptions.OpenemsError.OpenemsNamedException;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.BooleanReadChannel;
import io.openems.edge.common.channel.BooleanWriteChannel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.DoubleReadChannel;
import io.openems.edge.common.channel.IntegerReadChannel;
import io.openems.edge.common.channel.value.Value;
import io.openems.edge.common.component.OpenemsComponent;

/**
 * A generalized interface for a combined heat and power generator (chp).
 * Contains the most important functions that should be available on all chp, allowing a vendor agnostic 
 * implementation. Vendor specific interfaces should extend this interface.
 *
 */

public interface Chp extends Heater {

    enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        /**
         * Electric power generated by the chp at the moment.
		 *
		 * <ul>
		 *     <li> Interface: Chp
		 *     <li> Type: Double
		 *     <li> Unit: kilowatt
		 * </ul>
         */
        EFFECTIVE_ELECTRIC_POWER(Doc.of(OpenemsType.DOUBLE).unit(Unit.KILOWATT).accessMode(AccessMode.READ_ONLY));
    	
        private final Doc doc;

        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }

    }

    /**
     * Gets the Channel for {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}.
     *
     * @return the Channel
     */
    public default DoubleReadChannel getEffectiveElectricPowerChannel() {
        return this.channel(ChannelId.EFFECTIVE_ELECTRIC_POWER);
    }
    
    /**
     * Get the currently generated electric power of the chp in kilowatt. Value contains a double.
	 * See {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}.
	 *
	 * @return the Channel {@link Value}
     */
    public default Value<Double> getEffectiveElectricPower() {
		return this.getEffectiveElectricPowerChannel().value();
	}

    /**
	 * Internal method to set the 'nextValue' on {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}
	 * Channel.
	 *
	 * @param value the next value
	 */
    public default void _setEffectiveElectricPower(Double value) {
		this.getEffectiveElectricPowerChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#EFFECTIVE_ELECTRIC_POWER}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEffectiveElectricPower(double value) {
		this.getEffectiveElectricPowerChannel().setNextValue(value);
	}
}
