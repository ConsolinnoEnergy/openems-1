package io.openems.edge.heater.chp.dachs.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.BooleanReadChannel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.DoubleReadChannel;
import io.openems.edge.common.channel.IntegerReadChannel;
import io.openems.edge.common.channel.StringReadChannel;
import io.openems.edge.common.channel.value.Value;
import io.openems.edge.heater.api.Chp;

/**
 * Channels for the Dachs CHP.
 */

public interface DachsGltInterface extends Chp {

    public enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        /**
         * Run request message of the chp as a string. 
         * Dachs-Lauf-Anforderung, Hka_Bd.UHka_Anf.usAnforderung
         * <ul>
         * <li>Type: string
         * </ul>
         */
        RUN_REQUEST_MESSAGE(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Requested modules setting. Only available (!=0) if Dachs has more than one module. 
         * Anzahl der angeforderten Module, Hka_Bd.Anforderung.ModulAnzahl
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        NUMBER_OF_MODULES(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Not ready message of the chp as a string. 
         * Dachs-Lauf-Freigabe, Hka_Bd.UHka_Frei.usFreigabe
         * <ul>
         * <li>Type: string
         * </ul>
         */
        NOT_READY_MESSAGE(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Clearance code for electricity guided operation of the chp. 
         * Strom-Freigabe, Freigabe Stromführung, Hka_Bd.UStromF_Frei.bFreigabe
         * <ul>
         * <li>Type: string
         * </ul>
         */
        ELECTRICITY_GUIDED_OPERATION_CLEARANCE(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Result of the electricity guided operation settings. Should the chp be running now or not. 
         * Anforderungen Strom, Hka_Bd.UHka_Anf.Anforderung.fStrom
         * <ul>
         * <li>Type: boolean
         * </ul>
         */
        ELECTRICITY_GUIDED_OPERATION_RUNFLAG(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

        /**
         * Settings for electricity guided operation of the chp. 
         * Strom-Anforderung, Anforderungen Stromführung, Hka_Bd.Anforderung.UStromF_Anf.bFlagSF
         * <ul>
         * <li>Type: string
         * </ul>
         */
        ELECTRICITY_GUIDED_OPERATION_SETTINGS(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Electrical work generated by the chp since the last restart. 
         * Hka_Bd.ulArbeitElektr
         * <ul>
         * <li>Type: double
         * <li>Unit: kilowatt hours
         * </ul>
         */
        ELECTRICAL_WORK(Doc.of(OpenemsType.DOUBLE).unit(Unit.KILOWATT_HOURS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Thermal work generated by the chp since the last restart. 
         * Hka_Bd.ulArbeitThermHka
         * <ul>
         * <li>Type: double
         * <li>Unit: kilowatt hours
         * </ul>
         */
        THERMAL_WORK(Doc.of(OpenemsType.DOUBLE).unit(Unit.KILOWATT_HOURS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Thermal work generated by the condenser since the last restart. 
         * Hka_Bd.ulArbeitThermKon
         * <ul>
         * <li>Type: double
         * <li>Unit: kilowatt hours
         * </ul>
         */
        THERMAL_WORK_COND(Doc.of(OpenemsType.DOUBLE).unit(Unit.KILOWATT_HOURS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Time since last restart. 
         * Hka_Bd.ulBetriebssekunden (<- unit is hours, even if this says otherwise)
         * <ul>
         * <li>Type: double
         * <li>Unit: hours
         * </ul>
         */
        RUNTIME(Doc.of(OpenemsType.DOUBLE).unit(Unit.HOUR).accessMode(AccessMode.READ_ONLY)),

        /**
         * Rotations per minute of the chp engine. 
         * Hka_Mw1.usDrehzahl
         * <ul>
         * <li>Type: integer
         * <li>Unit: rotation per minute
         * </ul>
         */
        RPM(Doc.of(OpenemsType.INTEGER).unit(Unit.ROTATION_PER_MINUTE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Engine starts since last restart of the chp. 
         * Hka_Bd.ulAnzahlStarts
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        ENGINE_STARTS(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Serial number as a string. 
         * Hka_Bd_Stat.uchSeriennummer
         * <ul>
         * <li>Type: string
         * </ul>
         */
        SERIAL_NUMBER(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Parts number as a string. 
         * Hka_Bd_Stat.uchTeilenummer
         * <ul>
         * <li>Type: string
         * </ul>
         */
        PARTS_NUMBER(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),

        /**
         * Maintenance needed flag. If true will trigger "WARNING=true" and a text in WARNING_MESSAGE.
         * Wartung_Cache.fStehtAn
         * <ul>
         * <li>Type: boolean
         * </ul>
         */
        MAINTENANCE(Doc.of(OpenemsType.BOOLEAN).accessMode(AccessMode.READ_ONLY)),

		// Warning message, Hka_Bd.bWarnung - included in Heater

		// Error message, Hka_Bd.bStoerung - included in Heater
		;

        private final Doc doc;

        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }

    }


    /**
     * Gets the Channel for {@link ChannelId#RUN_REQUEST_MESSAGE}.
     *
     * @return the Channel
     */
    public default StringReadChannel getRunRequestMessageChannel() {
        return this.channel(ChannelId.RUN_REQUEST_MESSAGE);
    }
    
    /**
	 * Run request message of the chp as a string. Dachs-Lauf-Anforderung, Hka_Bd.UHka_Anf.usAnforderung
	 * See {@link ChannelId#RUN_REQUEST_MESSAGE}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getRunRequestMessage() {
		return this.getRunRequestMessageChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RUN_REQUEST_MESSAGE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setRunRequestMessage(String value) {
		this.getRunRequestMessageChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#NUMBER_OF_MODULES}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getNumberOfModulesChannel() {
        return this.channel(ChannelId.NUMBER_OF_MODULES);
    }
    
    /**
     * Number of requested modules. Only available (!=0) if Dachs has more than one module.
     * Anzahl der angeforderten Module, Hka_Bd.Anforderung.ModulAnzahl
	 * See {@link ChannelId#NUMBER_OF_MODULES}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Integer> getNumberOfModules() {
		return this.getNumberOfModulesChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#NUMBER_OF_MODULES}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setNumberOfModules(Integer value) {
		this.getNumberOfModulesChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#NUMBER_OF_MODULES}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setNumberOfModules(int value) {
		this.getNumberOfModulesChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#NOT_READY_MESSAGE}.
     *
     * @return the Channel
     */
    public default StringReadChannel getNotReadyMessageChannel() {
        return this.channel(ChannelId.NOT_READY_MESSAGE);
    }
    
    /**
	 * Not ready message of the chp. Dachs-Lauf-Freigabe, Hka_Bd.UHka_Frei.usFreigabe.
	 * See {@link ChannelId#NOT_READY_MESSAGE}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getNotReadyMessage() {
		return this.getNotReadyMessageChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#NOT_READY_MESSAGE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setNotReadyMessage(String value) {
		this.getRunRequestMessageChannel().setNextValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_CLEARANCE}.
     *
     * @return the Channel
     */
    public default StringReadChannel getElectricModeClearanceMessageChannel() {
        return this.channel(ChannelId.ELECTRICITY_GUIDED_OPERATION_CLEARANCE);
    }
    
    /**
	 * Clearance code for electricity guided operation of the chp. 
	 * Strom-Freigabe, Freigabe Stromführung, Hka_Bd.UStromF_Frei.bFreigabe
	 * See {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_CLEARANCE}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getElectricModeClearanceMessage() {
		return this.getElectricModeClearanceMessageChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_CLEARANCE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setElectricModeClearanceMessage(String value) {
		this.getElectricModeClearanceMessageChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_RUNFLAG}.
     *
     * @return the Channel
     */
	public default BooleanReadChannel getElectricModeRunFlagChannel() {
        return this.channel(ChannelId.ELECTRICITY_GUIDED_OPERATION_RUNFLAG);
    }
    
    /**
	 * Result of the electricity guided operation settings. Should the chp be running now or not. 
	 * Anforderungen Strom, Hka_Bd.UHka_Anf.Anforderung.fStrom
	 * See {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_RUNFLAG}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Boolean> getElectricModeRunFlag() {
		return this.getElectricModeRunFlagChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_RUNFLAG}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setElectricModeRunFlag(Boolean value) {
		this.getElectricModeRunFlagChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_SETTINGS}.
     *
     * @return the Channel
     */
	public default StringReadChannel getElectricModeSettingsMessageChannel() {
        return this.channel(ChannelId.ELECTRICITY_GUIDED_OPERATION_SETTINGS);
    }
    
    /**
	 * Settings for electricity guided operation of the chp. 
	 * Strom-Anforderung, Anforderungen Stromführung, Hka_Bd.Anforderung.UStromF_Anf.bFlagSF
	 * See {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_SETTINGS}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getElectricModeSettingsMessage() {
		return this.getElectricModeSettingsMessageChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ELECTRICITY_GUIDED_OPERATION_SETTINGS}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setElectricModeSettingsMessage(String value) {
		this.getElectricModeSettingsMessageChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#ELECTRICAL_WORK}.
     *
     * @return the Channel
     */
	public default DoubleReadChannel getElectricalWorkChannel() {
        return this.channel(ChannelId.ELECTRICAL_WORK);
    }
    
    /**
     * Electrical work generated by the chp since the last restart, in kilowatt hours. Hka_Bd.ulArbeitElektr
	 * See {@link ChannelId#ELECTRICAL_WORK}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Double> getElectricalWork() {
		return this.getElectricalWorkChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ELECTRICAL_WORK}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setElectricalWork(Double value) {
		this.getElectricalWorkChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ELECTRICAL_WORK}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setElectricalWork(double value) {
		this.getElectricalWorkChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#THERMAL_WORK}.
     *
     * @return the Channel
     */
	public default DoubleReadChannel getThermalWorkChannel() {
        return this.channel(ChannelId.THERMAL_WORK);
    }
    
    /**
     * Thermal work generated by the chp since the last restart, in kilowatt hours. Hka_Bd.ulArbeitThermHka
	 * See {@link ChannelId#THERMAL_WORK}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Double> getThermalWork() {
		return this.getThermalWorkChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#THERMAL_WORK}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setThermalWork(Double value) {
		this.getThermalWorkChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#THERMAL_WORK}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setThermalWork(double value) {
		this.getThermalWorkChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#THERMAL_WORK_COND}.
     *
     * @return the Channel
     */
	public default DoubleReadChannel getThermalWorkCondChannel() {
        return this.channel(ChannelId.THERMAL_WORK_COND);
    }
    
    /**
     * Thermal work generated by the condenser since the last restart, in kilowatt hours. Hka_Bd.ulArbeitThermKon
	 * See {@link ChannelId#THERMAL_WORK_COND}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Double> getThermalWorkCond() {
		return this.getThermalWorkCondChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#THERMAL_WORK_COND}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setThermalWorkCond(Double value) {
		this.getThermalWorkCondChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#THERMAL_WORK_COND}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setThermalWorkCond(double value) {
		this.getThermalWorkCondChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#RUNTIME}.
     *
     * @return the Channel
     */
	public default DoubleReadChannel getRuntimeSinceRestartChannel() {
        return this.channel(ChannelId.RUNTIME);
    }
    
    /**
     * Time since last restart in hours. Hka_Bd.ulBetriebssekunden (<- unit is hours, even if this says otherwise)
	 * See {@link ChannelId#RUNTIME}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Double> getRuntimeSinceRestart() {
		return this.getRuntimeSinceRestartChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RUNTIME}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setRuntimeSinceRestart(Double value) {
		this.getRuntimeSinceRestartChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RUNTIME}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setRuntimeSinceRestart(double value) {
		this.getRuntimeSinceRestartChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#RPM}.
     *
     * @return the Channel
     */
	public default IntegerReadChannel getRpmChannel() {
        return this.channel(ChannelId.RPM);
    }
    
    /**
     * Rotations per minute of the chp engine. Hka_Mw1.usDrehzahl
	 * See {@link ChannelId#RPM}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Integer> getRpm() {
		return this.getRpmChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RPM}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setRpm(Integer value) {
		this.getRpmChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#RPM}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setRpm(int value) {
		this.getRpmChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#ENGINE_STARTS}.
     *
     * @return the Channel
     */
	public default IntegerReadChannel getEngineStartsChannel() {
        return this.channel(ChannelId.ENGINE_STARTS);
    }
    
    /**
     * Engine starts since last restart of the chp. Hka_Bd.ulAnzahlStarts
	 * See {@link ChannelId#ENGINE_STARTS}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Integer> getEngineStarts() {
		return this.getEngineStartsChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ENGINE_STARTS}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEngineStarts(Integer value) {
		this.getEngineStartsChannel().setNextValue(value);
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#ENGINE_STARTS}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setEngineStarts(int value) {
		this.getEngineStartsChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#SERIAL_NUMBER}.
     *
     * @return the Channel
     */
	public default StringReadChannel getSerialNumberChannel() {
        return this.channel(ChannelId.SERIAL_NUMBER);
    }
    
    /**
	 * Serial number. Hka_Bd_Stat.uchSeriennummer
	 * See {@link ChannelId#SERIAL_NUMBER}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getSerialNumber() {
		return this.getSerialNumberChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#SERIAL_NUMBER}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setSerialNumber(String value) {
		this.getSerialNumberChannel().setNextValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#PARTS_NUMBER}.
     *
     * @return the Channel
     */
	public default StringReadChannel getPartsNumberChannel() {
        return this.channel(ChannelId.PARTS_NUMBER);
    }
    
    /**
	 * Parts number. Hka_Bd_Stat.uchTeilenummer
	 * See {@link ChannelId#PARTS_NUMBER}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<String> getPartsNumber() {
		return this.getPartsNumberChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#PARTS_NUMBER}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setPartsNumber(String value) {
		this.getPartsNumberChannel().setNextValue(value);
	}

	/**
     * Gets the Channel for {@link ChannelId#MAINTENANCE}.
     *
     * @return the Channel
     */
	public default BooleanReadChannel getMaintenanceFlagChannel() {
        return this.channel(ChannelId.MAINTENANCE);
    }
    
    /**
	 * Flag signaling that a maintenance is needed soon. If true will trigger "WARNING=true" and a text in WARNING_MESSAGE. 
	 * Wartung_Cache.fStehtAn
	 * See {@link ChannelId#MAINTENANCE}.
	 *
	 * @return the Channel {@link Value}
	 */
    public default Value<Boolean> getMaintenanceFlag() {
		return this.getMaintenanceFlagChannel().value();
	}
	
	/**
	 * Internal method to set the 'nextValue' on {@link ChannelId#MAINTENANCE}
	 * Channel.
	 *
	 * @param value the next value
	 */
	public default void _setMaintenanceFlag(Boolean value) {
		this.getMaintenanceFlagChannel().setNextValue(value);
	}
}
