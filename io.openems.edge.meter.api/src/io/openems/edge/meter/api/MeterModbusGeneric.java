package io.openems.edge.meter.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.Channel;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.StringReadChannel;
import io.openems.edge.common.component.OpenemsComponent;

/**
 * This Natures is an "Expansion" of the existing {@link Meter}.
 * This Nature is needed by Generic Modbus Meter, that may have Channels, that have different OpenEmsTypes
 * and other Units.
 * The Values from the ModbusCommunication can be stored in this/inheriting Natures converted and then be written in the
 * actual {@link Meter} Nature etc.
 */
public interface MeterModbusGeneric extends OpenemsComponent {

    public enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        /**
         * Reading Power of the HeatMeter.
         * <ul>
         * <li> Interface: HeatMeter
         * <li> Type: Long
         * </ul>
         */
        READING_POWER_LONG(Doc.of(OpenemsType.LONG).accessMode(AccessMode.READ_ONLY)),

        /**
         * Reading Power of the HeatMeter.
         * <ul>
         * <li> Interface: HeatMeter
         * <li> Type: Dobule
         * </ul>
         */
        READING_POWER_DOUBLE(Doc.of(OpenemsType.DOUBLE).accessMode(AccessMode.READ_ONLY)),

        /**
         * The last timestamp.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Double
         * <li>
         * </ul>
         */
        TIMESTAMP_LONG(Doc.of(OpenemsType.LONG).accessMode(AccessMode.READ_ONLY)),

        /**
         * The last timestamp.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Double
         * <li>
         * </ul>
         */
        TIMESTAMP_DOUBLE(Doc.of(OpenemsType.DOUBLE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Return Temp.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Long
         * <li>Unit:
         * </ul>
         */
        RETURN_TEMP_LONG(Doc.of(OpenemsType.LONG)),

        /**
         * Return Temp.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Double
         * <li>Unit: Dezidegree Celsius
         * </ul>
         */
        RETURN_TEMP_DOUBLE(Doc.of(OpenemsType.DOUBLE)),

        /**
         * Total Energy Reading.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Long
         * </ul>
         */
        READING_ENERGY_LONG(Doc.of(OpenemsType.LONG)),

        /**
         * Total Energy Reading.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Double
         * <li>Unit: WattHours
         * </ul>
         */
        READING_ENERGY_DOUBLE(Doc.of(OpenemsType.DOUBLE)),


        /**
         * The last timestamp. Unit is seconds since Epoch (1. 1. 1970). The timestamp is generated by OpenEMS.
         *
         * <ul>
         * <li>Interface: MeterModbusGeneric
         * <li>Type: Long
         * <li>Unit: seconds
         * </ul>
         */
        TIMESTAMP_SECONDS_GENERIC(Doc.of(OpenemsType.LONG).unit(Unit.SECONDS).accessMode(AccessMode.READ_ONLY)),

        /**
         * The last timestamp, as a string. Format is "dd-MM-yyyy HH:mm". Calculated from TIMESTAMP_SECONDS.
         *
         * <ul>
         * <li>Interface: WaterMeter
         * <li>Type: String
         * </ul>
         */
        TIMESTAMP_STRING_GENERIC(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY)),


        /**
         * Error message. Will contain "No error" when there is no error. Otherwise a description of the error will be
         * given.
         */

        ERROR_MESSAGE_GENERIC(Doc.of(OpenemsType.STRING).accessMode(AccessMode.READ_ONLY));


        private final Doc doc;

        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }


    }

    /**
     * Gets the Double TimeStamp Channel.
     *
     * @return the Channel.
     */
    default Channel<Double> _getTimeStampDoubleChannel() {
        return this.channel(ChannelId.TIMESTAMP_DOUBLE);
    }

    /**
     * Gets the Long TimeStamp Channel.
     *
     * @return the Channel.
     */
    default Channel<Long> _getTimeStampLongChannel() {
        return this.channel(ChannelId.TIMESTAMP_LONG);
    }

    /**
     * Get the ReadingPowerDouble Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReadingPowerChannel()}.
     *
     * @return the Channel.
     */

    default Channel<Double> _getReadingPowerDoubleChannel() {
        return this.channel(ChannelId.READING_POWER_DOUBLE);
    }

    /**
     * Get the ReadingPowerLong Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReadingPowerChannel()}.
     *
     * @return the Channel.
     */


    default Channel<Long> _getReadingPowerLongChannel() {
        return this.channel(ChannelId.READING_POWER_LONG);
    }

    /**
     * Get the ReturnTempDouble Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReturnTempChannel()}.
     *
     * @return the Channel.
     */

    default Channel<Double> _getReturnTempDoubleChannel() {
        return this.channel(ChannelId.RETURN_TEMP_DOUBLE);
    }

    /**
     * Get the ReturnTempLong Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReturnTempChannel()}.
     *
     * @return the Channel.
     */

    default Channel<Long> _getReturnTempLongChannel() {
        return this.channel(ChannelId.RETURN_TEMP_LONG);
    }


    /**
     * Get the ReadingEnergyDouble Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReadingEnergyChannel()}.
     *
     * @return the Channel.
     */

    default Channel<Double> _getReadingEnergyDouble() {
        return this.channel(ChannelId.READING_ENERGY_DOUBLE);
    }

    /**
     * Get the ReadingEnergyLong Channel.
     * Only Call by Generic Meter!
     * The actual Reading Power will be written into {@link HeatMeter#getReadingEnergyChannel()}.
     *
     * @return the Channel.
     */

    default Channel<Long> _getReadingEnergyLong() {
        return this.channel(ChannelId.READING_ENERGY_LONG);
    }

    /**
     * Checks if the Meter has a TimeStamp set. After that the stored value will be written to the actual {@link Meter}
     * Only call this within the implementing Class.
     * @return the channel that contains the value or else null.
     */
    default Channel<?> _hasTimeStamp() {
        return MeterModbusGeneric.getValueDefinedChannel(this._getTimeStampDoubleChannel(), this._getTimeStampLongChannel());
    }
    /**
     * Checks if the Meter has a Reading Power set. After that the stored value will be written to the actual {@link Meter}
     * Only call this within the implementing Class.
     * @return the channel that contains the value or else null.
     */
    default Channel<?> _hasReadingPower() {
        return MeterModbusGeneric.getValueDefinedChannel(this._getReadingPowerDoubleChannel(), this._getReadingPowerLongChannel());
    }
    /**
     * Checks if the Meter has a Return Temp set. After that the stored value will be written to the actual {@link Meter}
     * Only call this within the implementing Class.
     * @return the channel that contains the value or else null.
     */
    default Channel<?> _hasReturnTemp() {
        return MeterModbusGeneric.getValueDefinedChannel(this._getReturnTempDoubleChannel(), this._getReturnTempLongChannel());
    }
    /**
     * Checks if the Meter has a Reading Energy set. After that the stored value will be written to the actual {@link Meter}
     * Only call this within the implementing Class.
     * @return the channel that contains the value or else null.
     */
    default Channel<?> _hasReadEnergy() {
        return MeterModbusGeneric.getValueDefinedChannel(this._getReadingEnergyDouble(), this._getReadingEnergyLong());
    }

    static Channel<?> getValueDefinedChannel(Channel<?> firstChannel, Channel<?> secondChannel) {
        if (firstChannel.getNextValue().isDefined()) {
            return firstChannel;
        } else if (secondChannel.getNextValue().isDefined()) {
            return secondChannel;
        } else {
            return null;
        }
    }

    /**
     * Gets the Channel for {@link Meter.ChannelId#ERROR_MESSAGE}.
     *
     * @return the Channel
     */
    default Channel<String> getErrorMessageChannelGeneric() {
        return this.channel(ChannelId.ERROR_MESSAGE_GENERIC);
    }


}

