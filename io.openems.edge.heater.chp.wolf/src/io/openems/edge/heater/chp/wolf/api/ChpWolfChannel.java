package io.openems.edge.heater.chp.wolf.api;

import io.openems.common.channel.AccessMode;
import io.openems.common.channel.Unit;
import io.openems.common.exceptions.OpenemsError.OpenemsNamedException;
import io.openems.common.types.OpenemsType;
import io.openems.edge.common.channel.Doc;
import io.openems.edge.common.channel.IntegerReadChannel;
import io.openems.edge.common.channel.IntegerWriteChannel;
import io.openems.edge.common.channel.StringReadChannel;
import io.openems.edge.common.channel.value.Value;
import io.openems.edge.heater.api.Chp;

public interface ChpWolfChannel extends Chp {

    public enum ChannelId implements io.openems.edge.common.channel.ChannelId {

        // Holding registers, read/write

        /**
         * Write commands sent to the chp need to be encoded in these bits.
         * <ul>
         * <li>Type: long
         * </ul>
         */
        HR6358_WRITE_BITS1(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.WRITE_ONLY)),
        
        /**
         * Write commands sent to the chp need to be encoded in these bits.
         * <ul>
         * <li>Type: long
         * </ul>
         */
        HR6359_WRITE_BITS2(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.WRITE_ONLY)),
        
        /**
         * Write commands sent to the chp need to be encoded in these bits.
         * <ul>
         * <li>Type: long
         * </ul>
         */
        HR6360_WRITE_BITS3(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.WRITE_ONLY)),


        // Holding registers, read only

        /**
         * Status bits mapped to a 16bit holding register.
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        HR2_STATUS_BITS1(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Status bits mapped to a 16bit holding register.
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        HR11_STATUS_BITS2(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.READ_ONLY)),

        // HR27_FLOW_TEMP - Included in ChpBasic

        // HR28_RETURN_TEMP - Included in ChpBasic

        /**
         * Buffer tank temperature upper sensor.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degree Celsius
         * </ul>
         */
        HR32_BUFFERTANK_TEMP_UPPER(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Buffer tank temperature middle sensor.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degree Celsius
         * </ul>
         */
        HR33_BUFFERTANK_TEMP_MIDDLE(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        /**
         * Buffer tank temperature lower sensor.
         * <ul>
         * <li>Type: integer
         * <li>Unit: Decimal degree Celsius
         * </ul>
         */
        HR34_BUFFERTANK_TEMP_LOWER(Doc.of(OpenemsType.INTEGER).unit(Unit.DEZIDEGREE_CELSIUS).accessMode(AccessMode.READ_ONLY)),

        // HR263_ELECTRICAL_POWER - Included in ChpBasic

        /**
         * Rotations per minute of the chp engine.
         * <ul>
         * <li>Type: integer
         * <li>Unit: rotations per minute
         * </ul>
         */
        HR314_RPM(Doc.of(OpenemsType.INTEGER).unit(Unit.ROTATION_PER_MINUTE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Time since last restart. Double word.
         * <ul>
         * <li>Type: integer
         * <li>Unit: hours
         * </ul>
         */
        HR3588_RUNTIME(Doc.of(OpenemsType.INTEGER).unit(Unit.HOUR).accessMode(AccessMode.READ_ONLY)),

        /**
         * Engine starts since last restart of the chp.
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        HR3590_ENGINE_STARTS(Doc.of(OpenemsType.INTEGER).unit(Unit.NONE).accessMode(AccessMode.READ_ONLY)),

        /**
         * Electrical work generated by the chp since the last restart. Double word.
         * <ul>
         * <li>Type: integer
         * <li>Unit: kilowatt hours
         * </ul>
         */
        HR3596_ELECTRICAL_WORK(Doc.of(OpenemsType.INTEGER).unit(Unit.KILOWATT_HOURS).accessMode(AccessMode.READ_ONLY)),


    	// Non Modbus Channels
    	
    	/**
         * Set point for the generated electrical power.
         * <ul>
         * <li>Type: integer
         * <li>Unit: kilowatt
         * </ul>
         */
    	ELECTRIC_POWER_SETPOINT(Doc.of(OpenemsType.INTEGER).unit(Unit.KILOWATT).accessMode(AccessMode.READ_WRITE)),

        /**
         * Einspeisemanagement setpoint. Manual does not say what unit.
         * <ul>
         * <li>Type: integer
         * </ul>
         */
        EINSPEISEMANAGEMENT_SETPOINT(Doc.of(OpenemsType.INTEGER).accessMode(AccessMode.READ_WRITE)),

        /**
         * Reserve setpoint. Manual does not say what unit.
         * <ul>
         * <li>Type: integer
         * <li>Unit: kilowatt
         * </ul>
         */
        RESERVE_SETPOINT(Doc.of(OpenemsType.INTEGER).accessMode(AccessMode.READ_WRITE)),

        // OnOff - Included in Heater ENABLE_SIGNAL

        // Warning message - included in Heater

        // Error message - included in Heater
        ;
    	
        private final Doc doc;

        private ChannelId(Doc doc) {
            this.doc = doc;
        }

        public Doc doc() {
            return this.doc;
        }

    }


    /**
     * Gets the Channel for {@link ChannelId#HR6358_WRITE_BITS1}.
     *
     * @return the Channel
     */
    public default IntegerWriteChannel getWriteBits1Channel() {
        return this.channel(ChannelId.HR6358_WRITE_BITS1);
    }
    
    /**
	 * Set write bits1. See {@link ChannelId#HR6358_WRITE_BITS1}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setWriteBits1(Integer value) throws OpenemsNamedException {
		this.getWriteBits1Channel().setNextWriteValue(value);
	}
	
	/**
	 * Set write bits1. See {@link ChannelId#HR6358_WRITE_BITS1}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setWriteBits1(int value) throws OpenemsNamedException {
		this.getWriteBits1Channel().setNextWriteValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#HR6359_WRITE_BITS2}.
     *
     * @return the Channel
     */
	public default IntegerWriteChannel getWriteBits2Channel() {
        return this.channel(ChannelId.HR6359_WRITE_BITS2);
    }
    
    /**
	 * Set write bits2. See {@link ChannelId#HR6359_WRITE_BITS2}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setWriteBits2(Integer value) throws OpenemsNamedException {
		this.getWriteBits2Channel().setNextWriteValue(value);
	}
	
	/**
	 * Set write bits2. See {@link ChannelId#HR6359_WRITE_BITS2}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setWriteBits2(int value) throws OpenemsNamedException {
		this.getWriteBits2Channel().setNextWriteValue(value);
	}
	
	/**
     * Gets the Channel for {@link ChannelId#HR6360_WRITE_BITS3}.
     *
     * @return the Channel
     */
	public default IntegerWriteChannel getWriteBits3Channel() {
        return this.channel(ChannelId.HR6360_WRITE_BITS3);
    }
    
    /**
	 * Set write bits3. See {@link ChannelId#HR6360_WRITE_BITS3}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setWriteBits3(Integer value) throws OpenemsNamedException {
		this.getWriteBits3Channel().setNextWriteValue(value);
	}
	
	/**
	 * Set write bits3. See {@link ChannelId#HR6360_WRITE_BITS3}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setWriteBits3(int value) throws OpenemsNamedException {
		this.getWriteBits3Channel().setNextWriteValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#HR2_STATUS_BITS1}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getStatusBits40003Channel() {
        return this.channel(ChannelId.HR2_STATUS_BITS1);
    }

    /**
     * Status bits of Modbus address 40003.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getStatusBits40003() {
        return this.getStatusBits40003Channel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR11_STATUS_BITS2}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getStatusBits40012Channel() {
        return this.channel(ChannelId.HR11_STATUS_BITS2);
    }

    /**
     * Status bits of Modbus address 40012.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getStatusBits40012() {
        return this.getStatusBits40012Channel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR32_BUFFERTANK_TEMP_UPPER}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getBufferTankTempUpperChannel() {
        return this.channel(ChannelId.HR32_BUFFERTANK_TEMP_UPPER);
    }

    /**
     * Buffer tank temperature at the upper sensor. Unit is dezidegree Celsius.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getBufferTankTempUpper() {
        return this.getBufferTankTempUpperChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR33_BUFFERTANK_TEMP_MIDDLE}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getBufferTankTempMiddleChannel() {
        return this.channel(ChannelId.HR33_BUFFERTANK_TEMP_MIDDLE);
    }

    /**
     * Buffer tank temperature at the middle sensor. Unit is dezidegree Celsius.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getBufferTankTempMiddle() {
        return this.getBufferTankTempMiddleChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR34_BUFFERTANK_TEMP_LOWER}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getBufferTankTempLowerChannel() {
        return this.channel(ChannelId.HR34_BUFFERTANK_TEMP_LOWER);
    }

    /**
     * Buffer tank temperature at the lower sensor. Unit is dezidegree Celsius.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getBufferTankTempLower() {
        return this.getBufferTankTempLowerChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR314_RPM}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getRpmChannel() {
        return this.channel(ChannelId.HR314_RPM);
    }

    /**
     * Rotations per minute of the chp engine.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getRpm() {
        return this.getRpmChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR3588_RUNTIME}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getRuntimeChannel() {
        return this.channel(ChannelId.HR3588_RUNTIME);
    }

    /**
     * Time since last restart.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getRuntime() {
        return this.getRuntimeChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR3590_ENGINE_STARTS}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getEngineStartsChannel() {
        return this.channel(ChannelId.HR3590_ENGINE_STARTS);
    }

    /**
     * Engine starts since last restart of the chp.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getEngineStarts() {
        return this.getEngineStartsChannel().value();
    }

    /**
     * Gets the Channel for {@link ChannelId#HR3596_ELECTRICAL_WORK}.
     *
     * @return the Channel
     */
    public default IntegerReadChannel getElectricalWorkChannel() {
        return this.channel(ChannelId.HR3596_ELECTRICAL_WORK);
    }

    /**
     * Electrical work generated by the chp since the last restart.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getElectricalWork() {
        return this.getElectricalWorkChannel().value();
    }
    
    /**
     * Gets the Channel for {@link ChannelId#ELECTRIC_POWER_SETPOINT}.
     *
     * @return the Channel
     */
    public default IntegerWriteChannel getElectricPowerSetpointChannel() {
        return this.channel(ChannelId.ELECTRIC_POWER_SETPOINT);
    }
    
    /**
     * Electric power set point. See {@link ChannelId#ELECTRIC_POWER_SETPOINT}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getElectricPowerSetpoint() { 
    	return this.getElectricPowerSetpointChannel().value(); 
    }
    
    /**
	 * Set electric power set point. See {@link ChannelId#ELECTRIC_POWER_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setElectricPowerSetpoint(Integer value) throws OpenemsNamedException {
		this.getElectricPowerSetpointChannel().setNextWriteValue(value);
	}
	
	/**
	 * Set electric power set point. See {@link ChannelId#ELECTRIC_POWER_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setElectricPowerSetpoint(int value) throws OpenemsNamedException {
		this.getElectricPowerSetpointChannel().setNextWriteValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#EINSPEISEMANAGEMENT_SETPOINT}.
     *
     * @return the Channel
     */
    public default IntegerWriteChannel getEinspeisemanagementSetpointChannel() {
        return this.channel(ChannelId.EINSPEISEMANAGEMENT_SETPOINT);
    }
    
    /**
     * Get Einspeisemanagement set point. See {@link ChannelId#EINSPEISEMANAGEMENT_SETPOINT}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getEinspeisemanagementSetpoint() { 
    	return this.getEinspeisemanagementSetpointChannel().value(); 
    }
    
    /**
	 * Set Einspeisemanagement set point. See {@link ChannelId#EINSPEISEMANAGEMENT_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setEinspeisemanagementSetpoint(Integer value) throws OpenemsNamedException {
		this.getEinspeisemanagementSetpointChannel().setNextWriteValue(value);
	}
	
	/**
	 * Set Einspeisemanagement set point. See {@link ChannelId#EINSPEISEMANAGEMENT_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setEinspeisemanagementSetpoint(int value) throws OpenemsNamedException {
		this.getEinspeisemanagementSetpointChannel().setNextWriteValue(value);
	}

    /**
     * Gets the Channel for {@link ChannelId#RESERVE_SETPOINT}.
     *
     * @return the Channel
     */
    public default IntegerWriteChannel getReserveSetpointChannel() {
        return this.channel(ChannelId.RESERVE_SETPOINT);
    }
    
    /**
     * Get Reserve set point. See {@link ChannelId#RESERVE_SETPOINT}.
     *
     * @return the Channel {@link Value}
     */
    public default Value<Integer> getReserveSetpoint() { 
    	return this.getReserveSetpointChannel().value(); 
    }
    
    /**
	 * Set Reserve set point. See {@link ChannelId#RESERVE_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
    public default void setReserveSetpoint(Integer value) throws OpenemsNamedException {
		this.getReserveSetpointChannel().setNextWriteValue(value);
	}
	
	/**
	 * Set Reserve set point. See {@link ChannelId#RESERVE_SETPOINT}.
	 * 
	 * @param value the next write value
	 * @throws OpenemsNamedException on error
	 */
	public default void setReserveSetpoint(int value) throws OpenemsNamedException {
		this.getReserveSetpointChannel().setNextWriteValue(value);
	}
}
